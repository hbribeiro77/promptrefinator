#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para reproduzir o cen√°rio espec√≠fico descrito pelo usu√°rio:
- Selecionar uns 10 resultados no relat√≥rio
- Clicar no bot√£o "Excluir" ao lado de "Colunas"
- Verificar se as intima√ß√µes desaparecem
"""

import json
import requests
import time
from datetime import datetime

def carregar_intimacoes():
    """Carregar intima√ß√µes do arquivo"""
    try:
        with open('data/intimacoes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get('intimacoes', [])
    except Exception as e:
        print(f"Erro ao carregar intima√ß√µes: {e}")
        return []

def contar_analises_por_intimacao(intimacoes):
    """Contar an√°lises por intima√ß√£o"""
    contadores = {}
    for intimacao in intimacoes:
        id_intimacao = intimacao.get('id')
        processo = intimacao.get('processo', 'N/A')
        analises = intimacao.get('analises', [])
        analises_ids = [a.get('id') for a in analises if a.get('id')]
        
        contadores[id_intimacao] = {
            'processo': processo,
            'total_analises': len(analises),
            'analises_ids': analises_ids
        }
    return contadores

def coletar_analises_reais(intimacoes):
    """Coletar todas as an√°lises reais das intima√ß√µes"""
    analises_reais = []
    for intimacao in intimacoes:
        intimacao_id = intimacao.get('id')
        processo = intimacao.get('processo', 'N/A')
        analises = intimacao.get('analises', [])
        
        for analise in analises:
            if analise.get('id'):
                analises_reais.append({
                    'intimacao_id': intimacao_id,
                    'analise_id': analise.get('id'),
                    'processo': processo,
                    'analise_data': analise
                })
    
    return analises_reais

def simular_exclusao_relatorio():
    """Simular o cen√°rio espec√≠fico do usu√°rio no relat√≥rio"""
    print("=== TESTE DO CEN√ÅRIO DO USU√ÅRIO - EXCLUS√ÉO NO RELAT√ìRIO ===")
    print(f"In√≠cio do teste: {datetime.now()}")
    
    # Estado inicial
    print("\n1. ESTADO INICIAL:")
    intimacoes_inicial = carregar_intimacoes()
    contadores_inicial = contar_analises_por_intimacao(intimacoes_inicial)
    analises_reais = coletar_analises_reais(intimacoes_inicial)
    
    print(f"Total de intima√ß√µes: {len(intimacoes_inicial)}")
    print(f"Total de an√°lises reais encontradas: {len(analises_reais)}")
    
    for id_int, info in contadores_inicial.items():
        print(f"  - {id_int}: {info['processo']} ({info['total_analises']} an√°lises)")
        if info['analises_ids']:
            print(f"    IDs das an√°lises: {info['analises_ids'][:3]}{'...' if len(info['analises_ids']) > 3 else ''}")
    
    # Simular sele√ß√£o de ~10 an√°lises (ou todas dispon√≠veis se menos de 10)
    analises_para_excluir = analises_reais[:min(10, len(analises_reais))]
    
    print(f"\n2. SIMULANDO EXCLUS√ÉO DE {len(analises_para_excluir)} AN√ÅLISES DO RELAT√ìRIO:")
    
    if not analises_para_excluir:
        print("‚ùå Nenhuma an√°lise real dispon√≠vel para excluir")
        return False
    
    # Mostrar quais an√°lises ser√£o exclu√≠das
    for i, item in enumerate(analises_para_excluir):
        print(f"  {i+1}. An√°lise {item['analise_id']} da intima√ß√£o {item['intimacao_id']} (processo: {item['processo']})")
    
    # Simular exclus√µes via API (como faria o JavaScript do relat√≥rio)
    print("\n3. EXECUTANDO EXCLUS√ïES VIA API:")
    exclusoes_bem_sucedidas = 0
    exclusoes_falharam = 0
    
    for item in analises_para_excluir:
        intimacao_id = item['intimacao_id']
        analise_id = item['analise_id']
        
        try:
            # Fazer requisi√ß√£o DELETE para a API
            response = requests.delete(
                'http://localhost:5000/api/analises/excluir',
                json={
                    'intimacao_id': intimacao_id,
                    'analise_id': analise_id
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"  ‚úÖ An√°lise {analise_id} exclu√≠da com sucesso")
                    exclusoes_bem_sucedidas += 1
                else:
                    print(f"  ‚ùå Falha ao excluir an√°lise {analise_id}: {data.get('error', 'Erro desconhecido')}")
                    exclusoes_falharam += 1
            else:
                print(f"  ‚ùå Erro HTTP {response.status_code} ao excluir an√°lise {analise_id}")
                exclusoes_falharam += 1
                
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå Erro de conex√£o ao excluir an√°lise {analise_id}: {e}")
            exclusoes_falharam += 1
        
        # Pequena pausa entre requisi√ß√µes
        time.sleep(0.1)
    
    print(f"\n4. RESULTADO DAS EXCLUS√ïES:")
    print(f"  ‚úÖ Exclus√µes bem-sucedidas: {exclusoes_bem_sucedidas}")
    print(f"  ‚ùå Exclus√µes que falharam: {exclusoes_falharam}")
    
    # Aguardar um pouco para garantir que as opera√ß√µes foram processadas
    print("\n5. AGUARDANDO PROCESSAMENTO...")
    time.sleep(2)
    
    # Estado final
    print("\n6. ESTADO FINAL:")
    intimacoes_final = carregar_intimacoes()
    contadores_final = contar_analises_por_intimacao(intimacoes_final)
    analises_reais_final = coletar_analises_reais(intimacoes_final)
    
    print(f"Total de intima√ß√µes: {len(intimacoes_final)}")
    print(f"Total de an√°lises reais: {len(analises_reais_final)}")
    
    for id_int, info in contadores_final.items():
        print(f"  - {id_int}: {info['processo']} ({info['total_analises']} an√°lises)")
        if info['analises_ids']:
            print(f"    IDs das an√°lises: {info['analises_ids'][:3]}{'...' if len(info['analises_ids']) > 3 else ''}")
    
    # An√°lise dos resultados
    print("\n7. AN√ÅLISE DOS RESULTADOS:")
    
    # Intima√ß√µes perdidas
    intimacoes_perdidas = len(intimacoes_inicial) - len(intimacoes_final)
    print(f"  üìä Intima√ß√µes: {len(intimacoes_inicial)} ‚Üí {len(intimacoes_final)} (diferen√ßa: {intimacoes_perdidas})")
    
    if intimacoes_perdidas > 0:
        print(f"  üö® PROBLEMA CONFIRMADO: {intimacoes_perdidas} intima√ß√£o(√µes) foi(ram) perdida(s)!")
        
        # Identificar quais intima√ß√µes foram perdidas
        ids_inicial = {i.get('id') for i in intimacoes_inicial}
        ids_final = {i.get('id') for i in intimacoes_final}
        ids_perdidos = ids_inicial - ids_final
        
        print(f"  üìã Intima√ß√µes perdidas:")
        for id_perdido in ids_perdidos:
            intimacao_perdida = next((i for i in intimacoes_inicial if i.get('id') == id_perdido), None)
            if intimacao_perdida:
                processo = intimacao_perdida.get('processo', 'N/A')
                print(f"    - {id_perdido}: {processo}")
    elif intimacoes_perdidas < 0:
        print(f"  ‚ö†Ô∏è  ANOMALIA: {abs(intimacoes_perdidas)} intima√ß√£o(√µes) foi(ram) adicionada(s)!")
    else:
        print(f"  ‚úÖ Nenhuma intima√ß√£o foi perdida")
    
    # An√°lises perdidas
    analises_perdidas = len(analises_reais) - len(analises_reais_final)
    print(f"  üìä An√°lises: {len(analises_reais)} ‚Üí {len(analises_reais_final)} (diferen√ßa: {analises_perdidas})")
    
    # Verificar se alguma intima√ß√£o ficou sem an√°lises
    print("\n8. VERIFICA√á√ÉO DE INTIMA√á√ïES SEM AN√ÅLISES:")
    intimacoes_sem_analises = []
    for intimacao in intimacoes_final:
        analises = intimacao.get('analises', [])
        if not analises:
            intimacoes_sem_analises.append(intimacao)
    
    if intimacoes_sem_analises:
        print(f"  ‚ö†Ô∏è  {len(intimacoes_sem_analises)} intima√ß√£o(√µes) ficou(ram) sem an√°lises:")
        for intimacao in intimacoes_sem_analises:
            print(f"    - {intimacao.get('id')}: {intimacao.get('processo', 'N/A')}")
    else:
        print(f"  ‚úÖ Todas as intima√ß√µes ainda t√™m an√°lises")
    
    print(f"\nTeste conclu√≠do: {datetime.now()}")
    
    # Conclus√£o
    if intimacoes_perdidas > 0:
        print("\nüö® CONCLUS√ÉO: O problema foi reproduzido! A exclus√£o de an√°lises est√° causando perda de intima√ß√µes.")
        return True
    else:
        print("\n‚úÖ CONCLUS√ÉO: O problema n√£o foi reproduzido. As intima√ß√µes foram preservadas.")
        return False

def verificar_cenario_especifico():
    """Verificar se existe um cen√°rio espec√≠fico que pode causar o problema"""
    print("\n=== VERIFICA√á√ÉO DE CEN√ÅRIOS ESPEC√çFICOS ===")
    
    intimacoes = carregar_intimacoes()
    
    # Verificar se h√° intima√ß√µes que ficariam sem an√°lises ap√≥s exclus√£o
    print("\n1. INTIMA√á√ïES QUE PODEM FICAR SEM AN√ÅLISES:")
    intimacoes_vulneraveis = []
    
    for intimacao in intimacoes:
        analises = intimacao.get('analises', [])
        if len(analises) <= 10:  # Se tem 10 ou menos an√°lises, pode ficar sem nenhuma
            intimacoes_vulneraveis.append({
                'id': intimacao.get('id'),
                'processo': intimacao.get('processo', 'N/A'),
                'total_analises': len(analises)
            })
    
    if intimacoes_vulneraveis:
        print(f"  ‚ö†Ô∏è  {len(intimacoes_vulneraveis)} intima√ß√£o(√µes) pode(m) ficar sem an√°lises:")
        for item in intimacoes_vulneraveis:
            print(f"    - {item['id']}: {item['processo']} ({item['total_analises']} an√°lises)")
    else:
        print(f"  ‚úÖ Nenhuma intima√ß√£o ficaria sem an√°lises")
    
    return intimacoes_vulneraveis

if __name__ == '__main__':
    # Primeiro, verificar cen√°rios espec√≠ficos
    intimacoes_vulneraveis = verificar_cenario_especifico()
    
    # Depois, executar o teste principal
    problema_reproduzido = simular_exclusao_relatorio()
    
    if problema_reproduzido:
        print("\n‚ö†Ô∏è  RECOMENDA√á√ÉO: Investigar o c√≥digo de exclus√£o de an√°lises para identificar por que est√° removendo intima√ß√µes.")
    else:
        print("\n‚úÖ SISTEMA FUNCIONANDO CORRETAMENTE: A exclus√£o de an√°lises n√£o est√° afetando as intima√ß√µes.")
        
        if intimacoes_vulneraveis:
            print("\nüí° OBSERVA√á√ÉO: Embora o teste n√£o tenha reproduzido o problema, existem intima√ß√µes que podem ficar vulner√°veis se todas as suas an√°lises forem exclu√≠das.")