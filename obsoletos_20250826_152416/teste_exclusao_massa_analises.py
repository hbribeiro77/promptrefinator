#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para reproduzir o problema de exclus√£o em massa de an√°lises
que pode estar excluindo intima√ß√µes junto
"""

import json
import requests
import time
from datetime import datetime

def carregar_intimacoes():
    """Carregar intima√ß√µes do arquivo"""
    try:
        with open('data/intimacoes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get('intimacoes', [])
    except Exception as e:
        print(f"Erro ao carregar intima√ß√µes: {e}")
        return []

def contar_analises_por_intimacao(intimacoes):
    """Contar an√°lises por intima√ß√£o"""
    contadores = {}
    for intimacao in intimacoes:
        id_intimacao = intimacao.get('id')
        analises = intimacao.get('analises', [])
        contadores[id_intimacao] = {
            'processo': intimacao.get('processo', 'N/A'),
            'total_analises': len(analises),
            'analises_ids': [a.get('id') for a in analises if a.get('id')]
        }
    return contadores

def simular_exclusao_massa():
    """Simular exclus√£o em massa de an√°lises via API"""
    print("=== TESTE DE EXCLUS√ÉO EM MASSA DE AN√ÅLISES ===")
    print(f"In√≠cio do teste: {datetime.now()}")
    
    # Estado inicial
    print("\n1. ESTADO INICIAL:")
    intimacoes_inicial = carregar_intimacoes()
    contadores_inicial = contar_analises_por_intimacao(intimacoes_inicial)
    
    print(f"Total de intima√ß√µes: {len(intimacoes_inicial)}")
    for id_int, info in contadores_inicial.items():
        print(f"  - {id_int}: {info['processo']} ({info['total_analises']} an√°lises)")
        if info['analises_ids']:
            print(f"    IDs das an√°lises: {info['analises_ids'][:3]}{'...' if len(info['analises_ids']) > 3 else ''}")
    
    # Coletar an√°lises para exclus√£o
    analises_para_excluir = []
    for intimacao in intimacoes_inicial:
        id_intimacao = intimacao.get('id')
        analises = intimacao.get('analises', [])
        for analise in analises:
            if analise.get('id'):
                analises_para_excluir.append({
                    'intimacao_id': id_intimacao,
                    'analise_id': analise.get('id'),
                    'processo': intimacao.get('processo', 'N/A')
                })
    
    print(f"\n2. AN√ÅLISES IDENTIFICADAS PARA EXCLUS√ÉO: {len(analises_para_excluir)}")
    for i, analise in enumerate(analises_para_excluir[:5]):  # Mostrar apenas as primeiras 5
        print(f"  {i+1}. Intima√ß√£o: {analise['processo']} | An√°lise: {analise['analise_id'][:8]}...")
    
    if len(analises_para_excluir) > 5:
        print(f"  ... e mais {len(analises_para_excluir) - 5} an√°lises")
    
    if not analises_para_excluir:
        print("‚ùå Nenhuma an√°lise encontrada para testar exclus√£o")
        return
    
    # Simular exclus√£o (limitando a 3 an√°lises para teste)
    analises_teste = analises_para_excluir[:3]
    print(f"\n3. SIMULANDO EXCLUS√ÉO DE {len(analises_teste)} AN√ÅLISES:")
    
    sucessos = 0
    erros = 0
    
    for i, analise in enumerate(analises_teste, 1):
        print(f"\n  Excluindo {i}/{len(analises_teste)}: {analise['analise_id'][:8]}...")
        
        try:
            # Fazer requisi√ß√£o para a API local
            response = requests.delete(
                'http://localhost:5000/api/analises/excluir',
                json={
                    'intimacao_id': analise['intimacao_id'],
                    'analise_id': analise['analise_id']
                },
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print(f"    ‚úÖ Sucesso: {result.get('message', 'An√°lise exclu√≠da')}")
                    sucessos += 1
                else:
                    print(f"    ‚ùå Erro na resposta: {result.get('error', 'Erro desconhecido')}")
                    erros += 1
            else:
                print(f"    ‚ùå Erro HTTP {response.status_code}: {response.text}")
                erros += 1
                
        except requests.exceptions.ConnectionError:
            print(f"    ‚ö†Ô∏è  Servidor n√£o est√° rodando. Pulando teste de API.")
            print(f"    üí° Para testar completamente, execute: python app.py")
            break
        except Exception as e:
            print(f"    ‚ùå Erro na requisi√ß√£o: {e}")
            erros += 1
        
        # Pequena pausa entre exclus√µes
        time.sleep(0.5)
    
    print(f"\n4. RESULTADO DA EXCLUS√ÉO:")
    print(f"  ‚úÖ Sucessos: {sucessos}")
    print(f"  ‚ùå Erros: {erros}")
    
    # Estado final
    print("\n5. ESTADO FINAL:")
    intimacoes_final = carregar_intimacoes()
    contadores_final = contar_analises_por_intimacao(intimacoes_final)
    
    print(f"Total de intima√ß√µes: {len(intimacoes_final)}")
    for id_int, info in contadores_final.items():
        print(f"  - {id_int}: {info['processo']} ({info['total_analises']} an√°lises)")
    
    # Compara√ß√£o
    print("\n6. COMPARA√á√ÉO:")
    intimacoes_perdidas = len(intimacoes_inicial) - len(intimacoes_final)
    if intimacoes_perdidas > 0:
        print(f"  ‚ö†Ô∏è  PROBLEMA DETECTADO: {intimacoes_perdidas} intima√ß√£o(√µes) foi(ram) perdida(s)!")
        
        # Identificar quais intima√ß√µes foram perdidas
        ids_inicial = {i.get('id') for i in intimacoes_inicial}
        ids_final = {i.get('id') for i in intimacoes_final}
        ids_perdidos = ids_inicial - ids_final
        
        print("  Intima√ß√µes perdidas:")
        for id_perdido in ids_perdidos:
            intimacao_perdida = next((i for i in intimacoes_inicial if i.get('id') == id_perdido), None)
            if intimacao_perdida:
                processo = intimacao_perdida.get('processo', 'N/A')
                print(f"    - {id_perdido}: {processo}")
    elif intimacoes_perdidas < 0:
        print(f"  ‚ö†Ô∏è  ANOMALIA: {abs(intimacoes_perdidas)} intima√ß√£o(√µes) foi(ram) adicionada(s)!")
    else:
        print(f"  ‚úÖ Nenhuma intima√ß√£o foi perdida")
    
    # An√°lises perdidas
    total_analises_inicial = sum(info['total_analises'] for info in contadores_inicial.values())
    total_analises_final = sum(info['total_analises'] for info in contadores_final.values())
    analises_perdidas = total_analises_inicial - total_analises_final
    
    print(f"  üìä An√°lises: {total_analises_inicial} ‚Üí {total_analises_final} (diferen√ßa: {analises_perdidas})")
    
    print(f"\nTeste conclu√≠do: {datetime.now()}")

def main():
    try:
        simular_exclusao_massa()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()