#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para a fun√ß√£o de c√°lculo de custo real baseado em tokens

Este teste verifica se a fun√ß√£o calculate_real_cost est√° calculando
corretamente o custo baseado nos tokens de entrada e sa√≠da, modelo
e provedor (Azure ou OpenAI).
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.data_service import DataService

def test_calculate_real_cost():
    """Testa o c√°lculo de custo real baseado em tokens"""
    print("üß™ Iniciando teste de c√°lculo de custo real...")
    
    data_service = DataService()
    
    # Teste 1: GPT-4 com tokens de entrada e sa√≠da
    print("\nüìä Teste 1: GPT-4 com 1000 tokens input e 500 tokens output")
    tokens_input = 1000
    tokens_output = 500
    modelo = 'gpt-4'
    
    custo = data_service.calculate_real_cost(tokens_input, tokens_output, modelo)
    print(f"   Tokens Input: {tokens_input}")
    print(f"   Tokens Output: {tokens_output}")
    print(f"   Modelo: {modelo}")
    print(f"   Custo calculado: ${custo:.6f}")
    
    # Teste 2: GPT-3.5-turbo com tokens diferentes
    print("\nüìä Teste 2: GPT-3.5-turbo com 2000 tokens input e 1000 tokens output")
    tokens_input = 2000
    tokens_output = 1000
    modelo = 'gpt-3.5-turbo'
    
    custo = data_service.calculate_real_cost(tokens_input, tokens_output, modelo)
    print(f"   Tokens Input: {tokens_input}")
    print(f"   Tokens Output: {tokens_output}")
    print(f"   Modelo: {modelo}")
    print(f"   Custo calculado: ${custo:.6f}")
    
    # Teste 3: Modelo n√£o reconhecido (deve usar padr√£o)
    print("\nüìä Teste 3: Modelo n√£o reconhecido (deve usar gpt-3.5-turbo como padr√£o)")
    tokens_input = 500
    tokens_output = 250
    modelo = 'modelo-inexistente'
    
    custo = data_service.calculate_real_cost(tokens_input, tokens_output, modelo)
    print(f"   Tokens Input: {tokens_input}")
    print(f"   Tokens Output: {tokens_output}")
    print(f"   Modelo: {modelo}")
    print(f"   Custo calculado: ${custo:.6f}")
    
    # Teste 4: Tokens zero
    print("\nüìä Teste 4: Tokens zero (deve retornar 0)")
    tokens_input = 0
    tokens_output = 0
    modelo = 'gpt-4'
    
    custo = data_service.calculate_real_cost(tokens_input, tokens_output, modelo)
    print(f"   Tokens Input: {tokens_input}")
    print(f"   Tokens Output: {tokens_output}")
    print(f"   Modelo: {modelo}")
    print(f"   Custo calculado: ${custo:.6f}")
    
    # Teste 5: Verificar se o custo √© sempre positivo e razo√°vel
    print("\nüìä Teste 5: Verifica√ß√µes de valida√ß√£o")
    
    # Teste com valores altos
    custo_alto = data_service.calculate_real_cost(10000, 5000, 'gpt-4')
    print(f"   Custo para 10k input + 5k output (GPT-4): ${custo_alto:.6f}")
    
    # Verificar se o custo √© proporcional
    custo_baixo = data_service.calculate_real_cost(1000, 500, 'gpt-4')
    print(f"   Custo para 1k input + 500 output (GPT-4): ${custo_baixo:.6f}")
    
    if custo_alto > custo_baixo:
        print("   ‚úÖ Custo √© proporcional aos tokens (maior uso = maior custo)")
    else:
        print("   ‚ùå Erro: Custo n√£o √© proporcional aos tokens")
    
    print("\n‚úÖ Teste de c√°lculo de custo real conclu√≠do!")
    print("\nüìã Resumo dos testes:")
    print("   - C√°lculo com diferentes modelos")
    print("   - Tratamento de modelos n√£o reconhecidos")
    print("   - Tratamento de tokens zero")
    print("   - Verifica√ß√£o de proporcionalidade")
    print("   - Formata√ß√£o correta do resultado")

if __name__ == '__main__':
    test_calculate_real_cost()